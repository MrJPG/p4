ALGORITMOS - PRÁCTICA 4
AUTOR 1: Alejandro Fernández Otero               LOGIN 1: alejandro.fernandezo
AUTOR 2: Alejandro Javier Herrero Arango         LOGIN 2: a.j.herrero
GRUPO: 3.1
FECHA: 2/12/2022

La práctica fue realizada en ...
Maquina: Intel® Core™ i5-10210U CPU @ 1.60GHz × 8  (8GiB RAM)
SO: Fedora Linux 36 (Workstation Edition) LTS x64 (GNOME 42.4)
Kernel: 6.0.5-200.fc36.x86_64

-----------------------------------------------------------------------------------------------

Esta cuarta práctica gira alrededor de operaciones sobre montículos de máximos. En especial 
nos centramos en implementar crear_monticulo() y eliminar_mayor(), para despues analizar la 
ordenación de montículos (Que usa las dos operaciones anteriores y devuelve un vector de 
elementos ascendentes) para tres casos distintos: Que el vector de los elementos introducidos
en el montículo esté ordenado ascendentemente, descendentemente o de forma aleatoria. Cabe 
explicar que nuestros montículos están implementados a partir de un struct que contiene un 
vector y un entero que guarda el tamaño total del mismo.

-----------------------------------------------------------------------------------------------

En primer lugar, se valida el correcto funcionamiento de crear_monticulo(), eliminar_mayor()
y ord_monticulo() a través de la ejecución de un test en el que se maneja un montículo creado
a partir de una secuencia de 10 elementos aleatorios entre -10 y 10 (Puede cambiarse facilmente
al ser una macro definida al comienzo del programa).

Vector con el que formar el monticulo:
	  -2  -8  -3   8  -1  10 -10  -8   6   1
Distribucion de los elementos del monticulo:
	  10   8  -2   6   1  -3 -10  -8  -8  -1
Ordenacion del monticulo en un vector:
	 -10  -8  -8  -3  -2  -1   1   6   8  10
Monticulo tras 1 eliminaciones:
	   8   6  -2  -1   1  -3 -10  -8  -8
Monticulo tras 2 eliminaciones:
	   6   1  -2  -1  -8  -3 -10  -8
Monticulo tras 3 eliminaciones:
	   1  -1  -2  -8  -8  -3 -10
Monticulo tras 4 eliminaciones:
	  -1  -8  -2 -10  -8  -3
Monticulo tras 5 eliminaciones:
	  -2  -8  -3 -10  -8
Monticulo tras 6 eliminaciones:
	  -3  -8  -8 -10
Monticulo tras 7 eliminaciones:
	  -8 -10  -8
Monticulo tras 8 eliminaciones:
	  -8 -10
Monticulo tras 9 eliminaciones:
	 -10
Monticulo tras 10 eliminaciones:
	ERROR, monticulo vacio

--------------------------------------------------------------------------------------------------

Ahora, como pide el enunciado, se calcula empíricamente la complejidad computacional de ejecutar
nuestro heapsort ordenando monticulos creados a partir de vectores inicialmente ascendentes,
descendentes y aleatorios de tamaño n, yendo este de n = 500 a n = 512000 haciendo n = 2*n y dando
lugar finalmente a tres tablas de tiempos.
Además, antes de analizar la ordenación, se calculan en una primera tabla los tiempos de ejecución de
crear_monticulo(), para vectores ascendentes, con tal de comprobar que su complejidad es de O(n).

NOTA -> Todas las mediciones de tiempos están expresadas en micro segundos (μs).
        Para tiempos menores a 500μs se hace la medición 1000 veces distintas y se halla la media (*).

--------------------------------------------------------------------------------------------------

Analisis de crear_monticulo() con n elementos:
          n          t(n)   t(n)/log(n)        t(n)/n    t(n)/n^1.2
  *     500         8.397         1.351        0.0168       0.00485
  *    1000        15.470         2.240        0.0155       0.00389
  *    2000        30.433         4.004        0.0152       0.00333
  *    4000        54.524         6.574        0.0136       0.00259
  *    8000       104.538        11.632        0.0131       0.00217
  *   16000       207.648        21.450        0.0130       0.00187
  *   32000       406.349        39.172        0.0127       0.00159
      64000       850.000        76.807        0.0133       0.00145
     128000      1740.000       147.962        0.0136       0.00129
     256000      3484.000       279.773        0.0136       0.00113

Cota subestimada = log(n)
Cota sobrestimada = n
Cota ajustada = n^1.2

---OBSERVACIONES---
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a un valor de 0.013.
  - Queda comprobado empíricamente que la operación crear_monticulo() se ejecuta en un tiempo O(n).



Analisis de ord_monticulos() con n elementos ordenados ascendentemente:
          n          t(n)        t(n)/n    t(n)/n*log(n)    t(n)/n^1.4
  *     500        47.661        0.0953           0.0153      0.007936
  *    1000       109.310        0.1093           0.0158      0.006897
  *    2000       226.127        0.1131           0.0149      0.005406
       4000       570.000        0.1425           0.0172      0.005164   #Anomalia
       8000      1042.000        0.1303           0.0145      0.003577
      16000      2130.000        0.1331           0.0138      0.002771
      32000      4422.000        0.1382           0.0133      0.002180
      64000      9214.000        0.1440           0.0130      0.001721
     128000     20646.000        0.1613           0.0137      0.001461
     256000     44872.000        0.1753           0.0141      0.001203
     512000     87460.000        0.1708           0.0130      0.000889   #Anomalia

Cota subestimada = n
Cota sobrestimada = n^1.4
Cota ajustada = n*log(n)

---OBSERVACIONES---
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada tiende a un valor entre 0.013 y 0.014.



Analisis de ord_monticulos() con n elementos ordenados descendentemente:
          n          t(n)        t(n)/n    t(n)/n*log(n)    t(n)/n^1.4
  *     500        42.404        0.0848           0.0136      0.007061
  *    1000        96.227        0.0962           0.0139      0.006072
  *    2000       216.058        0.1080           0.0142      0.005166
  *    4000       463.384        0.1158           0.0140      0.004198
       8000       985.000        0.1231           0.0137      0.003382
      16000      2006.000        0.1254           0.0130      0.002610
      32000      4275.000        0.1336           0.0129      0.002107
      64000      9077.000        0.1418           0.0128      0.001695
     128000     20209.000        0.1579           0.0134      0.001430
     256000     42474.000        0.1659           0.0133      0.001139
     512000     85615.000        0.1672           0.0127      0.000870

Cota subestimada = n
Cota sobrestimada = n^1.4
Cota ajustada = n*log(n)

---OBSERVACIONES---
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada tiende a un valor de 0.013.



Analisis de ord_monticulos() con n elementos aleatorios:
          n          t(n)        t(n)/n    t(n)/n*log(n)    t(n)/n^1.4
  *     500        53.642        0.1073           0.0173      0.008932
  *    1000       117.518        0.1175           0.0170      0.007415
  *    2000       254.723        0.1274           0.0168      0.006090
       4000       607.000        0.1517           0.0183      0.005499
       8000      1205.000        0.1506           0.0168      0.004137
      16000      2614.000        0.1634           0.0169      0.003400
      32000      5744.000        0.1795           0.0173      0.002831
      64000     11984.000        0.1872           0.0169      0.002238
     128000     26451.000        0.2066           0.0176      0.001872
     256000     56525.000        0.2208           0.0177      0.001516
     512000    120350.000        0.2351           0.0179      0.001223

Cota subestimada = n
Cota sobrestimada = n^1.4
Cota ajustada = n*log(n)

---OBSERVACIONES---
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada tiende a un valor entre 0.017 y 0.018.

--------------------------------------------------------------------------------------------------

---CONCLUSIONES---
Finalmente, se determina que ordenar_monticulo(), o heapsort, tiene una complejidad computaional
de O(nlog(n)). Sin embargo, a pesar de ser algo superior a una complejidad lineal, tiene la ventaja
frente a otras ordenaciones de que no hay que preocuparse de cual sea la situacion inicial del
montículo, ya que es igual de costoso para las tres inicializaciones posibles. Cabe destacar que la
implementación usada es bastante óptima ya que usa el mismo vector para introducir elementos que para
ordenarlos a la vez que se elimina el mayor del montículo.

En general, tanto la creación de montículos como la ordenación de los elementos de uno dado, resultan
ser operaciones no muy costosas, y gran parte de su curva de complejidad viene dada por otras funciones
a las que llaman, como hundir() o eliminarMayor(), pero no a ser recursivas, a diferencia de otros
algoritmos estudiados en prácticas anteriores.
